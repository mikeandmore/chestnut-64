include flags.ninja

cflags = $cbaseflags -ffreestanding -fno-builtin -nostdlib -nostdinc -mno-mmx -mno-sse $
   -Ikern/ -Ikern/acpica/include -D__KERNEL__ -DBUILDING_ACPICA -U__linux__ -U_LINUX -D__CHESTNUT__ $
   -fcolor-diagnostics -mcmodel=kernel -target x86_64-unknown-linux-gnu -c
cxxflags = -std=c++11 $cflags -fno-exceptions -fno-rtti
rustlibflags = --opt-level=3 -Z no-landing-pads --target x86_64-unknown-linux-gnu
rustflags = $rustlibflags -L install --emit=bc --crate-type=rlib
ldflags = -T linker.ld -nodefaultlibs -melf_x86_64 -z max-page-size=0x1000
asmflags = -f elf64

rustc = rustc
ld = ld
ar = ar
cc = clang
cxx = clang++
asm = nasm
qemu = qemu-system-x86_64
xorriso = xorriso

rule rustc
   command = $rustc $rustflags -o $out.bc $in && $
             $cc $cflags -o $out $out.bc && rm $out.bc
   depfile = $out.d
   deps = gcc
   description = RUSTC $out

rule rustc_lib
   command = $rustc $rustlibflags -o $out $in
   depfile = $out.d
   deps = gcc
   description = RUSTC_LIB $out

rule cc
   command = $cc $cflags -o $out $in -MMD -MF $out.d
   depfile = $out.d
   deps = gcc
   description = CC $out

rule cxx
   command = $cxx $cxxflags -o $out $in -MMD -MF $out.d
   depfile = $out.d
   deps = gcc
   description = CXX $out

rule asm
   command = $asm $asmflags -o $out $in
   description = ASM $out

rule ld
   command = $ld $ldflags -o $out $in
   description = LD $out

rule ar
   command = $ar rcs $out $in
   description = AR $out

rule cat
   command = cat $in > $out
   description = CAT $out

rule cp
   command = cp -r $in $out
   description = CP $out

rule touch
   command = touch $out
   description = TOUCH $out

rule genrescue
   command = cp thirdparty/grub/grub.img isofiles/boot/grub && $
             $xorriso -as mkisofs -R -b boot/grub/grub.img -no-emul-boot $
                     -boot-load-size 4 -boot-info-table -o $out $in
   description = GENRESCUE $out

rule qemu
   command = $qemu -cdrom $in
   description = QEMU $in
